{"ast":null,"code":"import { authentication, signOut } from './../api/userAPI';\nimport { auth } from '../Database/FirebaseConnect';\nconst SET_PRELODER = 'SET_PRELODER';\nconst SET_AUTH_USER = 'SET_AUTH_USER';\nlet initsialStore = {\n  isAuth: null,\n  preloder: true,\n  initialApp: null\n};\n\nconst userReducer = (state = initsialStore, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER:\n      return { ...state,\n        isAuth: action.isAuth\n      };\n\n    case SET_PRELODER:\n      return { ...state,\n        preloder: action.isFetching\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setPreloder = isFetching => {\n  return {\n    type: SET_PRELODER,\n    isFetching\n  };\n};\n\nconst setAuthUser = isAuth => {\n  return {\n    type: SET_AUTH_USER,\n    isAuth\n  };\n};\n\nexport const setUserThunk = () => {\n  return dispatch => {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        dispatch(setAuthUser(true));\n      } else {\n        dispatch(setAuthUser(false));\n      }\n    });\n  };\n};\nexport const signOutThunk = () => {\n  return dispatch => {\n    if (signOut()) {\n      dispatch(setAuthUser(false));\n      alert('Logaut success');\n    }\n  };\n};\nexport const authThunk = (email, password) => {\n  return dispatch => {\n    authentication(email, password).then(() => {\n      dispatch(setAuthUser(true));\n    }).catch(e => {\n      alert(e.message);\n    });\n  };\n};\nexport default userReducer;","map":{"version":3,"sources":["/Users/macbookair/Documents/Webapps/react-crm/client/src/redux/usersReducer.js"],"names":["authentication","signOut","auth","SET_PRELODER","SET_AUTH_USER","initsialStore","isAuth","preloder","initialApp","userReducer","state","action","type","isFetching","setPreloder","setAuthUser","setUserThunk","dispatch","onAuthStateChanged","user","signOutThunk","alert","authThunk","email","password","then","catch","e","message"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,kBAAxC;AACA,SAASC,IAAT,QAAqB,6BAArB;AAGA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,aAAa,GAAG;AAChBC,EAAAA,MAAM,EAAE,IADQ;AAEhBC,EAAAA,QAAQ,EAAE,IAFM;AAGhBC,EAAAA,UAAU,EAAE;AAHI,CAApB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,aAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHJ,QAAAA,MAAM,EAAEK,MAAM,CAACL;AAFZ,OAAP;;AAIJ,SAAKH,YAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHH,QAAAA,QAAQ,EAAEI,MAAM,CAACE;AAFd,OAAP;;AAIJ;AAAS,aAAOH,KAAP;AAXb;AAcH,CAfD;;AAgBA,OAAO,MAAMI,WAAW,GAAID,UAAD,IAAgB;AAAE,SAAO;AAAED,IAAAA,IAAI,EAAET,YAAR;AAAsBU,IAAAA;AAAtB,GAAP;AAA2C,CAAjF;;AACP,MAAME,WAAW,GAAIT,MAAD,IAAY;AAAE,SAAO;AAAEM,IAAAA,IAAI,EAAER,aAAR;AAAuBE,IAAAA;AAAvB,GAAP;AAAwC,CAA1E;;AAEA,OAAO,MAAMU,YAAY,GAAG,MAAM;AAC9B,SAAQC,QAAD,IAAc;AACjBf,IAAAA,IAAI,CAACgB,kBAAL,CAAyBC,IAAD,IAAU;AAC9B,UAAIA,IAAJ,EAAU;AACNF,QAAAA,QAAQ,CAACF,WAAW,CAAC,IAAD,CAAZ,CAAR;AACH,OAFD,MAEO;AACHE,QAAAA,QAAQ,CAACF,WAAW,CAAC,KAAD,CAAZ,CAAR;AACH;AACJ,KAND;AAOH,GARD;AASH,CAVM;AAWP,OAAO,MAAMK,YAAY,GAAG,MAAM;AAC9B,SAAQH,QAAD,IAAc;AACjB,QAAIhB,OAAO,EAAX,EAAe;AACXgB,MAAAA,QAAQ,CAACF,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAM,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACH;AAEJ,GAND;AAQH,CATM;AAUP,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAQP,QAAD,IAAc;AACjBjB,IAAAA,cAAc,CAACuB,KAAD,EAAQC,QAAR,CAAd,CAAgCC,IAAhC,CAAqC,MAAM;AACvCR,MAAAA,QAAQ,CAACF,WAAW,CAAC,IAAD,CAAZ,CAAR;AACH,KAFD,EAEGW,KAFH,CAEUC,CAAD,IAAO;AACZN,MAAAA,KAAK,CAACM,CAAC,CAACC,OAAH,CAAL;AACH,KAJD;AAKH,GAND;AAOH,CARM;AAUP,eAAenB,WAAf","sourcesContent":["import { authentication, signOut } from './../api/userAPI'\nimport { auth } from '../Database/FirebaseConnect';\n\n\nconst SET_PRELODER = 'SET_PRELODER';\nconst SET_AUTH_USER = 'SET_AUTH_USER';\n\nlet initsialStore = {\n    isAuth: null,\n    preloder: true,\n    initialApp: null\n};\n\nconst userReducer = (state = initsialStore, action) => {\n    switch (action.type) {\n        case SET_AUTH_USER:\n            return {\n                ...state,\n                isAuth: action.isAuth\n            }\n        case SET_PRELODER:\n            return {\n                ...state,\n                preloder: action.isFetching\n            }\n        default: return state;\n    }\n\n}\nexport const setPreloder = (isFetching) => { return { type: SET_PRELODER, isFetching } }\nconst setAuthUser = (isAuth) => { return { type: SET_AUTH_USER, isAuth } }\n\nexport const setUserThunk = () => {\n    return (dispatch) => {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                dispatch(setAuthUser(true))\n            } else {\n                dispatch(setAuthUser(false))\n            }\n        })\n    }\n}\nexport const signOutThunk = () => {\n    return (dispatch) => {\n        if (signOut()) {\n            dispatch(setAuthUser(false))\n            alert('Logaut success')\n        }\n\n    }\n\n}\nexport const authThunk = (email, password) => {\n    return (dispatch) => {\n        authentication(email, password).then(() => {\n            dispatch(setAuthUser(true))\n        }).catch((e) => {\n            alert(e.message)\n        })\n    }\n}\n\nexport default userReducer;\n\n"]},"metadata":{},"sourceType":"module"}